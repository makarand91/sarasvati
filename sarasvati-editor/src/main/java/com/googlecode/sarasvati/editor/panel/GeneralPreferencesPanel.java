/*
    This file is part of Sarasvati.

    Sarasvati is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    Sarasvati is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with Sarasvati.  If not, see <http://www.gnu.org/licenses/>.

    Copyright 2009 Paul Lorenz
*/

package com.googlecode.sarasvati.editor.panel;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.prefs.BackingStoreException;

import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import com.googlecode.sarasvati.editor.model.EditorNodeType;
import com.googlecode.sarasvati.editor.model.EditorPreferences;

/**
 * @author Paul Lorenz
 */
@SuppressWarnings({"synthetic-access", "rawtypes", "unchecked"})
public class GeneralPreferencesPanel extends BasePrefsPage {

    private static final long serialVersionUID = 1L;

    /** Creates new form GeneralPreferencesPanel */
    public GeneralPreferencesPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        defaultNodeTypeLabel = new javax.swing.JLabel();
        defaultNodeTypeInput = new javax.swing.JComboBox();
        applyButton = new javax.swing.JButton();
        revertButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        checkLibraryRecursiveInput = new javax.swing.JCheckBox();
        libraryInput = new javax.swing.JTextField();
        libraryBrowseButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        defaultSelfArcsLabelInput = new javax.swing.JTextField();

        defaultNodeTypeLabel.setText(org.openide.util.NbBundle.getMessage(GeneralPreferencesPanel.class, "GeneralPreferencesPanel.defaultNodeTypeLabel.text")); // NOI18N

        defaultNodeTypeInput.setModel(getNodeTypesModel());

        applyButton.setText(org.openide.util.NbBundle.getMessage(GeneralPreferencesPanel.class, "GeneralPreferencesPanel.applyButton.text")); // NOI18N

        revertButton.setText(org.openide.util.NbBundle.getMessage(GeneralPreferencesPanel.class, "GeneralPreferencesPanel.revertButton.text")); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText(org.openide.util.NbBundle.getMessage(GeneralPreferencesPanel.class, "GeneralPreferencesPanel.jLabel1.text")); // NOI18N

        checkLibraryRecursiveInput.setText(org.openide.util.NbBundle.getMessage(GeneralPreferencesPanel.class, "GeneralPreferencesPanel.checkLibraryRecursiveInput.text")); // NOI18N

        libraryInput.setText(org.openide.util.NbBundle.getMessage(GeneralPreferencesPanel.class, "GeneralPreferencesPanel.libraryInput.text")); // NOI18N

        libraryBrowseButton.setText(org.openide.util.NbBundle.getMessage(GeneralPreferencesPanel.class, "GeneralPreferencesPanel.libraryBrowseButton.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkLibraryRecursiveInput)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(libraryInput, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(libraryBrowseButton))
                    .addComponent(jLabel1))
                .addContainerGap(91, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(libraryInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(libraryBrowseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkLibraryRecursiveInput)
                .addGap(28, 28, 28))
        );

        jLabel2.setText(org.openide.util.NbBundle.getMessage(GeneralPreferencesPanel.class, "GeneralPreferencesPanel.jLabel2.text")); // NOI18N

        defaultSelfArcsLabelInput.setText(org.openide.util.NbBundle.getMessage(GeneralPreferencesPanel.class, "GeneralPreferencesPanel.defaultSelfArcsLabelInput.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(defaultNodeTypeLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(defaultNodeTypeInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(37, 37, 37))
                                    .addComponent(defaultSelfArcsLabelInput, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)))
                            .addComponent(revertButton))
                        .addGap(18, 18, 18)
                        .addComponent(applyButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(defaultNodeTypeLabel)
                    .addComponent(defaultNodeTypeInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(defaultSelfArcsLabelInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 323, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(applyButton)
                    .addComponent(revertButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyButton;
    private javax.swing.JCheckBox checkLibraryRecursiveInput;
    private javax.swing.JComboBox defaultNodeTypeInput;
    private javax.swing.JLabel defaultNodeTypeLabel;
    private javax.swing.JTextField defaultSelfArcsLabelInput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton libraryBrowseButton;
    private javax.swing.JTextField libraryInput;
    private javax.swing.JButton revertButton;
    // End of variables declaration//GEN-END:variables

    private final DefaultComboBoxModel nodeTypesModel = new DefaultComboBoxModel();

    public ComboBoxModel getNodeTypesModel ()
    {
      return nodeTypesModel;
    }

    @Override
    public void setup ()
    {
      libraryBrowseButton.addActionListener( new ActionListener()
      {
        @Override
        public void actionPerformed (final ActionEvent e)
        {
          File currentDir = new File( libraryInput.getText() );
          JFileChooser dirChooser = new JFileChooser( currentDir );
          dirChooser.setFileSelectionMode( JFileChooser.DIRECTORIES_ONLY );

          int retVal = dirChooser.showDialog( GeneralPreferencesPanel.this, "Select" );

          if ( retVal == JFileChooser.APPROVE_OPTION )
          {
            libraryInput.setText( dirChooser.getSelectedFile().getAbsolutePath() );
          }
        }
      });

      revertButton.addActionListener( new ActionListener()
      {
        @Override
        public void actionPerformed (final ActionEvent e)
        {
          if ( JOptionPane.YES_OPTION ==
               JOptionPane.showConfirmDialog( GeneralPreferencesPanel.this,
                                              "Revert all changes?",
                                              "Confirm",
                                              JOptionPane.YES_NO_OPTION ) )
          {
            loadPage();
          }
        }
      });

      applyButton.addActionListener( new ActionListener()
      {
        @Override
        public void actionPerformed (final ActionEvent event)
        {
          try
          {
            final String libraryPath = libraryInput.getText();
            final boolean recurseLibrary = checkLibraryRecursiveInput.isSelected();
            final EditorNodeType defaultNodeType = (EditorNodeType)defaultNodeTypeInput.getSelectedItem();
            final String defaultSelfArcsLabel = defaultSelfArcsLabelInput.getText();
            EditorPreferences.getInstance().saveGeneralPreferences( libraryPath,
                                                                    recurseLibrary,
                                                                    defaultNodeType,
                                                                    defaultSelfArcsLabel );
            JOptionPane.showMessageDialog( GeneralPreferencesPanel.this,
                                           "Changes saved", "Info",
                                           JOptionPane.INFORMATION_MESSAGE );
          }
          catch (final BackingStoreException e)
          {
            e.printStackTrace();
            JOptionPane.showMessageDialog( GeneralPreferencesPanel.this,
                                           "Failed to save preferences: " + e.getMessage(),
                                           "Error", JOptionPane.ERROR_MESSAGE );
          }
        }
      });
    }

    public void loadPage ()
    {
      EditorPreferences prefs = EditorPreferences.getInstance();
      libraryInput.setText( prefs.getLibraryPath() );
      checkLibraryRecursiveInput.setSelected( prefs.isRecurseLibrary() );

      nodeTypesModel.removeAllElements();
      for ( EditorNodeType nodeType : prefs.getNodeTypes() )
      {
        nodeTypesModel.addElement( nodeType );
      }

      nodeTypesModel.setSelectedItem( prefs.getDefaultNodeType() );
      defaultSelfArcsLabelInput.setText( prefs.getDefalutSelfArcsLabel() );
    }

    @Override
    public void displayPage ()
    {
      loadPage();
    }
}
