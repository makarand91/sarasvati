/*
    This file is part of Sarasvati.

    Sarasvati is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    Sarasvati is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with Sarasvati.  If not, see <http://www.gnu.org/licenses/>.

    Copyright 2009 Paul Lorenz
*/

package com.googlecode.sarasvati.editor.panel;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.prefs.BackingStoreException;

import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JColorChooser;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;

import com.googlecode.sarasvati.editor.GraphEditor;
import com.googlecode.sarasvati.editor.model.EditorNodeType;
import com.googlecode.sarasvati.editor.model.EditorPreferences;
import com.googlecode.sarasvati.visual.common.NodeDrawConfig;
import com.googlecode.sarasvati.visual.icon.NodeIconType;

/**
 *
 * @author Paul Lorenz
 */
@SuppressWarnings({"synthetic-access", "rawtypes", "unchecked"})
public class NodeTypePreferencesPanel extends BasePrefsPage {

    private static final long serialVersionUID = 1L;

    /** Creates new form NodeTypePreferences */
    public NodeTypePreferencesPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        nodeTypeList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        nodeTypeNameInput = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        propertiesTable = new javax.swing.JTable();
        allowCustomInput = new javax.swing.JCheckBox();
        newTypeButton = new javax.swing.JButton();
        deleteTypeButton = new javax.swing.JButton();
        newPropertyButton = new javax.swing.JButton();
        deletePropertyButton = new javax.swing.JButton();
        revertButton = new javax.swing.JButton();
        applyButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        iconInput = new javax.swing.JComboBox();
        iconColorLabel = new javax.swing.JLabel();
        iconColorButton = new javax.swing.JButton();

        nodeTypeList.setModel(getNodeTypeListModel());
        nodeTypeList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        nodeTypeList.setPreferredSize(new java.awt.Dimension(200, 100));
        jScrollPane1.setViewportView(nodeTypeList);

        jLabel1.setText(org.openide.util.NbBundle.getMessage(NodeTypePreferencesPanel.class, "NodeTypePreferencesPanel.jLabel1.text")); // NOI18N

        nodeTypeNameInput.setText(org.openide.util.NbBundle.getMessage(NodeTypePreferencesPanel.class, "NodeTypePreferencesPanel.nodeTypeNameInput.text")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(NodeTypePreferencesPanel.class, "NodeTypePreferencesPanel.jLabel2.text")); // NOI18N

        jLabel3.setText(org.openide.util.NbBundle.getMessage(NodeTypePreferencesPanel.class, "NodeTypePreferencesPanel.jLabel3.text")); // NOI18N

        jLabel4.setText(org.openide.util.NbBundle.getMessage(NodeTypePreferencesPanel.class, "NodeTypePreferencesPanel.jLabel4.text")); // NOI18N

        propertiesTable.setModel(getPropertiesTableModel());
        jScrollPane2.setViewportView(propertiesTable);

        allowCustomInput.setText(org.openide.util.NbBundle.getMessage(NodeTypePreferencesPanel.class, "NodeTypePreferencesPanel.allowCustomInput.text")); // NOI18N

        newTypeButton.setText(org.openide.util.NbBundle.getMessage(NodeTypePreferencesPanel.class, "NodeTypePreferencesPanel.newTypeButton.text")); // NOI18N

        deleteTypeButton.setText(org.openide.util.NbBundle.getMessage(NodeTypePreferencesPanel.class, "NodeTypePreferencesPanel.deleteTypeButton.text")); // NOI18N

        newPropertyButton.setText(org.openide.util.NbBundle.getMessage(NodeTypePreferencesPanel.class, "NodeTypePreferencesPanel.newPropertyButton.text")); // NOI18N

        deletePropertyButton.setText(org.openide.util.NbBundle.getMessage(NodeTypePreferencesPanel.class, "NodeTypePreferencesPanel.deletePropertyButton.text")); // NOI18N

        revertButton.setText(org.openide.util.NbBundle.getMessage(NodeTypePreferencesPanel.class, "NodeTypePreferencesPanel.revertButton.text")); // NOI18N

        applyButton.setText(org.openide.util.NbBundle.getMessage(NodeTypePreferencesPanel.class, "NodeTypePreferencesPanel.applyButton.text")); // NOI18N

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText(org.openide.util.NbBundle.getMessage(NodeTypePreferencesPanel.class, "NodeTypePreferencesPanel.jLabel5.text")); // NOI18N

        iconInput.setModel(getIconTypesModel());

        iconColorLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        iconColorLabel.setText(org.openide.util.NbBundle.getMessage(NodeTypePreferencesPanel.class, "NodeTypePreferencesPanel.iconColorLabel.text_1")); // NOI18N

        iconColorButton.setText(org.openide.util.NbBundle.getMessage(NodeTypePreferencesPanel.class, "NodeTypePreferencesPanel.iconColorButton.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(292, Short.MAX_VALUE)
                .addComponent(revertButton)
                .addGap(18, 18, 18)
                .addComponent(applyButton)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(iconColorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(iconColorButton)
                .addContainerGap(338, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(newTypeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteTypeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(newPropertyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(deletePropertyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(allowCustomInput, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(iconInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nodeTypeNameInput, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE))))
                .addGap(68, 68, 68))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addContainerGap(356, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newTypeButton)
                        .addGap(17, 17, 17)
                        .addComponent(deleteTypeButton)))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nodeTypeNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(iconInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(iconColorLabel)
                    .addComponent(iconColorButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newPropertyButton)
                    .addComponent(deletePropertyButton))
                .addGap(18, 18, 18)
                .addComponent(allowCustomInput)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(applyButton)
                    .addComponent(revertButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox allowCustomInput;
    private javax.swing.JButton applyButton;
    private javax.swing.JButton deletePropertyButton;
    private javax.swing.JButton deleteTypeButton;
    private javax.swing.JButton iconColorButton;
    private javax.swing.JLabel iconColorLabel;
    private javax.swing.JComboBox iconInput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton newPropertyButton;
    private javax.swing.JButton newTypeButton;
    private javax.swing.JList nodeTypeList;
    private javax.swing.JTextField nodeTypeNameInput;
    private javax.swing.JTable propertiesTable;
    private javax.swing.JButton revertButton;
    // End of variables declaration//GEN-END:variables

    private final DefaultListModel nodeTypeListModel = new DefaultListModel();
    private final DefaultComboBoxModel iconTypesModel = new DefaultComboBoxModel();
    private final EditorNodeTypeTableModel propertiesTableModel = new EditorNodeTypeTableModel();
    private final NameChangeListener nameChangeListener = new NameChangeListener();

    public ListModel getNodeTypeListModel ()
    {
      return nodeTypeListModel;
    }

    public TableModel getPropertiesTableModel ()
    {
      return propertiesTableModel;
    }

    public DefaultComboBoxModel getIconTypesModel ()
    {
      return iconTypesModel;
    }

    protected class NameChangeListener implements DocumentListener
    {
      private int index;
      private EditorNodeType nodeType;

      /**
       * @return the nodeType
       */
      public EditorNodeType getNodeType ()
      {
        return nodeType;
      }

      /**
       * @param nodeType the nodeType to set
       */
      public void setNodeType (final EditorNodeType nodeType)
      {
        this.nodeType = nodeType;
      }

      /**
       * @return the index
       */
      public int getIndex ()
      {
        return index;
      }

      /**
       * @param index the index to set
       */
      public void setIndex (final int index)
      {
        this.index = index;
      }

      @Override
      public void changedUpdate (final DocumentEvent e)
      {
        nameUpdated();
      }

      @Override
      public void insertUpdate (final DocumentEvent e)
      {
        nameUpdated();
      }

      @Override
      public void removeUpdate (final DocumentEvent e)
      {
        nameUpdated();
      }

      public void nameUpdated ()
      {
        if ( nodeType != null )
        {
          nodeType.setName( nodeTypeNameInput.getText() );
          nodeTypeListModel.set( index, nodeType );
        }
      }
    }



    @Override
    public void setup ()
    {
      propertiesTable.putClientProperty( "terminateEditOnFocusLost", Boolean.TRUE );

      reloadList();

      for ( NodeIconType iconType : NodeIconType.values() )
      {
        iconTypesModel.addElement( iconType );
      }

      nodeTypeNameInput.getDocument().addDocumentListener( nameChangeListener );
      allowCustomInput.addActionListener( new ActionListener()
      {
        @Override
        public void actionPerformed (final ActionEvent e)
        {
          EditorNodeType nodeType = (EditorNodeType)nodeTypeList.getSelectedValue();
          if ( nodeType != null )
          {
            nodeType.setAllowNonSpecifiedAttributes( allowCustomInput.isSelected() );
          }
        }
      });

      nodeTypeList.getSelectionModel().addListSelectionListener( new ListSelectionListener()
      {
        @Override
        public void valueChanged (final ListSelectionEvent event)
        {
          editSelected();
        }
      });

      newTypeButton.addActionListener( new ActionListener()
      {
        @Override
        public void actionPerformed (final ActionEvent e)
        {
          EditorNodeType newNodeType = new EditorNodeType( "new-node-type",
                                                           false,
                                                           NodeIconType.Oval,
                                                           NodeDrawConfig.NODE_BG_ACTIVE );
          nodeTypeListModel.addElement( newNodeType );
          nodeTypeList.setSelectedValue( newNodeType, true );
        }
      });

      deleteTypeButton.addActionListener( new ActionListener()
      {
        @Override
        public void actionPerformed (final ActionEvent e)
        {
          nodeTypeListModel.remove( nodeTypeList.getSelectedIndex() );
        }
      });

      newPropertyButton.addActionListener( new ActionListener()
      {
        @Override
        public void actionPerformed (final ActionEvent e)
        {
          propertiesTableModel.addAttribute();
        }
      });

      deletePropertyButton.addActionListener( new ActionListener()
      {
        @Override
        public void actionPerformed (final ActionEvent e)
        {
          int [] indices = propertiesTable.getSelectedRows();
          Arrays.sort( indices );
          for ( int i = indices.length - 1; i >= 0; i-- )
          {
            propertiesTableModel.removeAttribute( indices[i] );
          }
        }
      });

      revertButton.addActionListener( new ActionListener()
      {
        @Override
        public void actionPerformed (final ActionEvent e)
        {
          if ( JOptionPane.YES_OPTION ==
               JOptionPane.showConfirmDialog( NodeTypePreferencesPanel.this,
                                              "Revert all changes?",
                                              "Confirm",
                                              JOptionPane.YES_NO_OPTION ) )
          {
            reloadList();
          }
        }
      });

      applyButton.addActionListener( new ActionListener()
      {
        @Override
        public void actionPerformed (final ActionEvent event)
        {
          List<EditorNodeType> newNodeTypes = new ArrayList<EditorNodeType>( nodeTypeListModel.size() );

          for ( int i = 0; i < nodeTypeListModel.size(); i++ )
          {
            newNodeTypes.add( (EditorNodeType)nodeTypeListModel.get( i ) );
          }

          try
          {
            EditorPreferences.getInstance().saveNodeTypes( newNodeTypes );
            JOptionPane.showMessageDialog( NodeTypePreferencesPanel.this, "Changes saved", "Info", JOptionPane.INFORMATION_MESSAGE );
            GraphEditor.getInstance().nodeTypesChanged();
          }
          catch (final BackingStoreException e)
          {
            e.printStackTrace();
            JOptionPane.showMessageDialog( NodeTypePreferencesPanel.this,
                                           "Failed to save preferences: " + e.getMessage(),
                                           "Error", JOptionPane.ERROR_MESSAGE );
          }
        }
      });

      this.iconInput.addActionListener( new ActionListener()
      {
        @Override
        public void actionPerformed (final ActionEvent e)
        {
          EditorNodeType nodeType = (EditorNodeType)nodeTypeList.getSelectedValue();
          if ( nodeType != null )
          {
            nodeType.setNodeIconType( (NodeIconType)iconInput.getSelectedItem() );
          }
        }
      });

      iconColorButton.setText( " " );
      iconColorButton.addActionListener( new ActionListener()
      {
        @Override
        public void actionPerformed (final ActionEvent e)
        {
          final EditorNodeType nodeType = (EditorNodeType)nodeTypeList.getSelectedValue();
          if ( nodeType != null )
          {
            Color color = JColorChooser.showDialog( NodeTypePreferencesPanel.this, "Icon color", nodeType.getIconColor() );

            if ( color != null )
            {
              nodeType.setIconColor( color );
              iconColorButton.setBackground( color );
            }
          }
        }
      });
    }

    public void reloadList ()
    {
      nodeTypeListModel.removeAllElements();
      for ( EditorNodeType nodeType :  EditorPreferences.getInstance().getNodeTypes() )
      {
        nodeTypeListModel.addElement( nodeType.copy() );
      }
    }

    @Override
    public void displayPage ()
    {
      reloadList();
      clearEdit ();
    }

    protected void editSelected ()
    {
      EditorNodeType nodeType = (EditorNodeType)nodeTypeList.getSelectedValue();
      if ( nodeType != null )
      {
        ensureEnabled();
        editType( nodeType );
        deleteTypeButton.setEnabled( true );
      }
      else
      {
        clearEdit();
      }
    }

    public void editType (final EditorNodeType nodeType)
    {
      propertiesTableModel.setNodeType( nodeType );
      nameChangeListener.setIndex( nodeTypeList.getSelectedIndex() );
      nameChangeListener.setNodeType( nodeType );

      nodeTypeNameInput.setText( nodeType.getName() );
      allowCustomInput.setSelected( nodeType.isAllowNonSpecifiedAttributes() );
      iconTypesModel.setSelectedItem( nodeType.getNodeIconType() );
      iconColorButton.setBackground( nodeType.getIconColor() );
    }

    protected void ensureEnabled ()
    {
      if ( !nodeTypeNameInput.isEnabled() )
      {
        nodeTypeNameInput.setEnabled( true );
        allowCustomInput.setEnabled( true );
        propertiesTable.setEnabled( true );
        newPropertyButton.setEnabled( true );
        deletePropertyButton.setEnabled( true );
        allowCustomInput.setEnabled( true );
        deleteTypeButton.setEnabled( true );
        iconInput.setEnabled( true );
        iconColorButton.setEnabled( true );
      }
    }

    public void clearEdit ()
    {
      propertiesTableModel.setNodeType( null );
      nameChangeListener.setNodeType( null );

      nodeTypeNameInput.setText( "" );
      allowCustomInput.setSelected( false );

      nodeTypeNameInput.setEnabled( false );
      allowCustomInput.setEnabled( false );
      propertiesTable.setEnabled( false );
      newPropertyButton.setEnabled( false );
      deletePropertyButton.setEnabled( false );
      allowCustomInput.setEnabled( false );

      deleteTypeButton.setEnabled( false );
      iconInput.setEnabled( false );
      iconColorButton.setEnabled( false );
      iconColorButton.setBackground( this.getBackground() );
    }
}
